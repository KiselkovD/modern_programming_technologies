
.

./fractal.c
//vvv beg_of_file vvv//
#include "image.h"
#include "fractal.h"

void empty_fractal(image_p picture)
{
}
//^^^ end_of_file ^^^//

./fractal.h
//vvv beg_of_file vvv//
#ifndef _FRACTAL_H_
#define _FRACTAL_H_

#include "image.h"

/**
 * @brief Draws empty fractal, assuming image is clean
 *
 * @param picture 
 */
void empty_fractal(image_p picture);

#endif // _FRACTAL_H_
//^^^ end_of_file ^^^//

./image.c
//vvv beg_of_file vvv//
#include <stdlib.h>
#include <assert.h>
#include <string.h>

#include "image.h"

/**
 * @brief Structure to store image data and metadata
 */
struct image
{
    pixel_coord width, height;
    pixel_data *data;
};

image_p create_image(pixel_coord width, pixel_coord height)
{
    image_t *v = malloc(sizeof(image_t));
    v->width = width;
    v->height = height;
    v->data = malloc(sizeof(pixel_data) * width * height);

    return v;
}

void clear_image(image_p picture)
{
    memset(picture->data, 0, sizeof(pixel_data) * picture->width * picture->height);
}

void fill_random(image_p picture)
{
    pixel_data *p = picture->data;
    for(pixel_coord z = 0; z < picture->height * picture->width; ++z, ++p)
        *p = (pixel_data) rand();
}

void free_image(image_p picture)
{
    free(picture->data);
    free(picture);
}

int save_pgm(image_p picture, const char *filename)
{
    FILE *to = fopen("test.pgm", "w");
    fprintf(to, "P2\n%u %u\n255\n", picture->width, picture->height);

    pixel_data *p = picture->data;
    for(pixel_coord y = 0; y < picture->height; ++y)
        for(pixel_coord x = 0; x < picture->width; ++x)
            fprintf(to, "%u%c", *(p++), x == picture->width - 1 ? '\n' : ' ');

    fclose(to);
    return 0;
}

void set_pixel(image_p picture, pixel_coord x, pixel_coord y, pixel_data color)
{
    assert(("Out of dimension", x >= 0 && y >= 0 && x < picture->width && y < picture->height));
    picture->data[picture->width * y + x] = color;
}

pixel_data get_pixel(image_p picture, pixel_coord x, pixel_coord y)
{
    assert(("Out of dimension", x >= 0 && y >= 0 && x < picture->width && y < picture->height));
    return picture->data[picture->width * y + x];
}
//^^^ end_of_file ^^^//

./image.h
//vvv beg_of_file vvv//
#ifndef _IMAGE_H_
#define _IMAGE_H_

#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>

/**
 * @brief One pixel data in-place 
 */
typedef uint8_t pixel_data;

/**
 * @brief Coordinate of a pixel and dimension of an image
 */
typedef unsigned int pixel_coord;

struct image;

/**
 * @brief Image for application
 */
typedef struct image image_t, *image_p;

/**
 * @brief Create image of given width and height
 * @param width,height Dimensions of an image
 * @returns an image
 */
image_p create_image(pixel_coord width, pixel_coord height);

void fill_random(image_p picture);

void clear_image(image_p picture);

void free_image(image_p picture);

int save_pgm(image_p picture, const char *filename);

/**
 * @brief Set the pixel of an image to given color
 *
 * @param picture Image
 * @param x,y Pixel coordinates
 * @param color Color value
 */
void set_pixel(image_p picture, pixel_coord x, pixel_coord y, pixel_data color);

/**
 * @brief Get the pixel of an image
 *
 * @param picture Image
 * @param x,y Pixel coordinates
 * @returns pixel Color value
 */
pixel_data get_pixel(image_p picture, pixel_coord x, pixel_coord y);

#endif // _IMAGE_H_
//^^^ end_of_file ^^^//

./main.c
//vvv beg_of_file vvv//
#include <stdio.h>
#include "image.h"
#include "fractal.h"

int main()
{
    image_p img = create_image(300, 300);

    fill_random(img);

    for(pixel_coord p = 2; p < 300 - 2; ++p)
        for(int offs = -2; offs < 2; ++offs)
            set_pixel(img, p, p + offs, (pixel_data) p);

    empty_fractal(img);

    save_pgm(img, "test.pgm");
    return 0;
}
//^^^ end_of_file ^^^//

./makefile
//vvv beg_of_file vvv//
CC=cc
LD=$(CC)
CCOPT=

%.o : %.c
	$(CC) -c $(CCOPT) -o $@ $<

program : release

# test target too

release   : CCOPT += -O3 -DNDEBUG
debug     : CCOPT += -g -DDEBUG
debug_test: CCOPT += -g -DDEBUG

release    : main.o      image.o fractal.o
	$(LD) -o $@ $^

debug      : main.o      image.o fractal.o
	$(LD) -o $@ $^

debug_test : test_main.o image.o fractal.o
	$(LD) -o $@ $^

clean :
	- rm *.o
	- rm *.hdrdep.bak

cleanall : clean
	- rm release debug debug_test
	- echo > makefile.hdrdep

mrproper : cleanall

# Advanced feature: #include file dependencies
# Run `make depends` before `make all`

depends :
	makedepend -f makefile.hdrdep *.c

include makefile.hdrdep
//^^^ end_of_file ^^^//

./makefile.hdrdep
//vvv beg_of_file vvv//

//^^^ end_of_file ^^^//

./test_main.c
//vvv beg_of_file vvv//
#include <stdio.h>
#include "../YY.utest/utest.h"
#include "image.h"
#include "fractal.h"

struct ImageTestFixture {
    image_p i;
};

UTEST_F_SETUP(ImageTestFixture) {
    utest_fixture->i = create_image(300, 300);
    ASSERT_NE((void *) utest_fixture->i, NULL);
}

UTEST_F_TEARDOWN(ImageTestFixture) {
    free_image(utest_fixture->i);
}

UTEST_F(ImageTestFixture, Set_Get_Pixel1){
    set_pixel(utest_fixture->i, 10, 10, 10);
    ASSERT_EQ(10, get_pixel(utest_fixture->i, 10, 10));
}

UTEST_F(ImageTestFixture, ClearImage2){
    clear_image(utest_fixture->i);
    ASSERT_EQ(0, get_pixel(utest_fixture->i, 10, 10));
}

UTEST_MAIN();
//^^^ end_of_file ^^^//

./txt.txt
//vvv beg_of_file vvv//
//^^^ end_of_file ^^^//



1 directory, 9 files
